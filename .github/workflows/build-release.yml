# .github/workflows/build-release.yml

# 1. Name of the workflow
name: Build Windows Executable

# 2. Trigger: Run this workflow only when a new tag starting with 'v' is pushed
on:
  push:
    tags:
      - 'v*'

# 3. Jobs: Define the tasks to be run
jobs:
  build-windows-exe:
    # 4. Runner: Use the latest available Windows machine
    runs-on: windows-latest

    # 5. Steps: A sequence of tasks to execute
    steps:
      # Step 5.1: Check out the repository's code so the runner can access it
      - name: Check out code
        uses: actions/checkout@v4

      # Step 5.2: Set up a Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Choose a Python version you use for development

      # Step 5.3: Install project dependencies from requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 5.4: Run PyInstaller to create the executable
      # This is the most important step. We add hidden imports and data files.
      - name: Build executable with PyInstaller
        run: |
          pyinstaller main.py `
            --name "TeltonikaToolkit" `
            --onefile `
            --windowed `
            --icon="path/to/your/icon.ico" `
            --add-data "config.json;." `
            --add-data "server_logs;server_logs" `
            --add-data "logs;logs" `
            --hidden-import "PySide6.QtWebEngineCore" `
            --hidden-import "PySide6.QtWebEngineWidgets" `
            --hidden-import "pandas" `
            --hidden-import "folium"

      # Step 5.5: Upload the built .exe file as a release artifact
      # This makes the .exe available for download from the GitHub UI.
      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: TeltonikaToolkit-Windows-${{ github.ref_name }}
          path: dist/TeltonikaToolkit.exe